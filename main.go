package main

import "igen/cmd"

func main() {
	cmd.Execute()
}

// func main() {
// 	verbose := flag.Bool("version", false, "生成版本文件")

// 	// 解析命令行参数
// 	flag.Parse()

// 	if *verbose {
// 		fmt.Println("正在进行详细输出...")
// 	}

// 	// flag.Args() 可以获取非标志参数（即在所有标志之后的参数）
// 	fmt.Println("非标志参数:", flag.Args())

// 	// 	sourceAbsPath, _package, _file := _init()
// 	// 	// 假设生成的文件与源文件在同一目录
// 	// 	// 这要求 go generate 在包含 main.go 的目录下运行
// 	// 	// 或者你需要根据实际情况调整 outputFilePath 的计算方式
// 	// 	outputFileName := "generated.go"
// 	// 	outputFilePath := filepath.Join(filepath.Dir(sourceAbsPath), outputFileName) // 尝试将生成文件放在源文件旁边

// 	// 	f, err := os.Create(outputFilePath)
// 	// 	if err != nil {
// 	// 		log.Fatalf("Error creating file %s: %v", outputFilePath, err)
// 	// 	}
// 	// 	defer f.Close()

// 	// 	// 写入生成内容
// 	// 	content := fmt.Sprintf(`// Code generated by go generate; DO NOT EDIT.

// 	// package %s // 使用获取到的包名

// 	// const GeneratedPackage = "%s"
// 	// const GeneratedFile = "%s"
// 	// const ENVS = "%s"
// 	// `, pkgName, pkgName, fileName, envs[:1]+"|"+cwd+"|"+fileName)

// 	// 	_, err = f.WriteString(content)
// 	// 	if err != nil {
// 	// 		log.Fatalf("Error writing to file %s: %v", outputFilePath, err)
// 	// 	}

// 	// fmt.Printf("Generated %s for package '%s' from file '%s'\n", outputFilePath, pkgName, fileName)
// }
